const express = require('express');
const mongoose = require('mongoose');
const app = express();
app.use(express.json());

mongoose.connect('mongodb://localhost:27017/accountdb', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// User Schema & Model
const userSchema = new mongoose.Schema({
  username: String,
  balance: Number
});
const User = mongoose.model('User', userSchema);

// Insert sample users (run once)
app.post('/insert-sample', async (req, res) => {
  await User.deleteMany({});
  await User.insertMany([
    { username: 'alice', balance: 1000 },
    { username: 'bob', balance: 500 }
  ]);
  res.send('Sample users inserted.');
});

// Transfer money
app.post('/transfer', async (req, res) => {
  const { from, to, amount } = req.body;

  if (!from || !to || !amount || amount <= 0) {
    return res.status(400).json({ error: 'Invalid transfer data.' });
  }

  const sender = await User.findOne({ username: from });
  const receiver = await User.findOne({ username: to });

  if (!sender) return res.status(404).json({ error: 'Sender not found.' });
  if (!receiver) return res.status(404).json({ error: 'Receiver not found.' });

  if (sender.balance < amount) {
    return res.status(400).json({ error: 'Insufficient balance.' });
  }

  // Update balances
  sender.balance -= amount;
  receiver.balance += amount;
  await sender.save();
  await receiver.save();

  res.json({
    message: `Transferred ${amount} from ${from} to ${to}.`,
    senderBalance: sender.balance,
    receiverBalance: receiver.balance
  });
});

// Get all users
app.get('/users', async (req, res) => {
  const users = await User.find();
  res.json(users);
});

app.listen(3000, () => console.log('Account Transfer API running on port 3000'));
