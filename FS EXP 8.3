// server.js
const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

const SECRET = 'supersecretkey';

// Dummy users
const users = [
  { username: 'admin', password: 'admin123', role: 'Admin' },
  { username: 'mod', password: 'mod123', role: 'Moderator' },
  { username: 'user', password: 'user123', role: 'User' }
];

// Login route
app.post('/login', (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username && u.password === password);
  if (!user) return res.status(401).json({ message: 'Invalid credentials' });
  const token = jwt.sign({ username: user.username, role: user.role }, SECRET, { expiresIn: '1h' });
  res.json({ token });
});

// Middleware to authenticate token & extract role
function authenticateJWT(req, res, next) {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.status(401).json({ message: 'Missing token' });
  const token = authHeader.split(' ')[1];
  jwt.verify(token, SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: 'Invalid token' });
    req.user = user;
    next();
  });
}

// Middleware to check role
function authorizeRoles(...roles) {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ message: 'Access denied: Insufficient role' });
    }
    next();
  };
}

// Admin-only route
app.get('/admin/dashboard', authenticateJWT, authorizeRoles('Admin'), (req, res) => {
  res.json({ message: 'Welcome to the Admin Dashboard' });
});

// Moderator-only route
app.get('/moderator/manage', authenticateJWT, authorizeRoles('Moderator'), (req, res) => {
  res.json({ message: 'Moderator Management Panel' });
});

// User route
app.get('/user/profile', authenticateJWT, authorizeRoles('User', 'Admin', 'Moderator'), (req, res) => {
  res.json({ message: `Hello, ${req.user.username}. Role: ${req.user.role}` });
});

// Start Server
app.listen(3000, () => console.log('RBAC server running on port 3000'));
